<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.stella_trip.dao.user.UserDAO">

    <resultMap id="UserMap" type="UserDTO">
        <id column= "user_id" property="userId"/>
        <result column="name" property="name"/>
        <result column="email" property="email"/>
        <result column="role" property="role"/>
        <result column="description" property="description"/>
        <result column="image" property="image"/>
        <result column="created_at" property="createdAt"/>
        <result column="modified_at" property="modifiedAt"/>
    </resultMap>

    <resultMap id="UserProfileMap" type="UserProfileDTO" extends="UserMap">
        <result column="follower_count" property="followerCount"/>
        <result column="following_count" property="followingCount"/>
    </resultMap>

    <select id="getWritersByPlanId" resultMap="UserMap">
        select u.* from user u
        left join plan_writer p
        on p.user_id = u.user_id
        where p.plan_id = #{planId}
    </select>

    <select id="getUserByEmail" resultMap="UserMap">
        select * from user where email = #{email}
    </select>

    <insert id="insertUser" useGeneratedKeys="true" keyProperty="userId">
        insert into user(name, email, role, password)
        values( #{name}, #{email}, #{role}, #{password})
    </insert>

    <!-- 자신의 ID로 회원 탈퇴 -->
    <delete id="deleteUserByUserId">
        delete from user where user_id=#{userId}
    </delete>

    <!-- 특정 사용자 ID로 프로필 정보 조회 -->
    <select id="getUserProfile" resultMap="UserProfileMap">
        select
        u.*,
        (select count(*) from follower f where f.user_id = u.user_id) as follower_count,
        (select count(*) from follower f where f.following_id = u.user_id) as following_count
        from user u
        where u.user_id = #{userId}
    </select>

    <!-- 자신의 프로필 정보 수정 -->
    <update id="updateMyProfileByUserId">
        update user
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="description != null">description = #{description},</if>
            <if test="image != null">image = #{image},</if>
        </set>
        where user_id = #{userId}
    </update>

    <!-- 자신의 비밀번호 수정 -->
    <update id="updatePasswordByUserId">
        update user
        <set>
            <if test="password != null">password = #{password},</if>
        </set>
        where user_id = #{userId}
    </update>

    <!-- 특정 사용자의 팔로잉 목록 조회 (내가 팔로우하는 사람들) -->
    <select id="getFollowingsByUserId" resultMap="UserMap">
        SELECT
        u.user_id as userId,
        u.name,
        u.email,
        u.role,
        u.description,
        u.image,
        u.created_at as createdAt,
        u.modified_at as modifiedAt
        FROM
        user u
        JOIN
        follower f ON u.user_id = f.following_id
        WHERE
        f.user_id = #{userId}
        ORDER BY
        u.name ASC
        LIMIT
        #{size} OFFSET #{offset}
    </select>

    <!-- 특정 사용자의 팔로워 목록 조회 (나를 팔로우하는 사람들) -->
    <select id="getFollowersByUserId" resultMap="UserMap">
        SELECT
        u.user_id as userId,
        u.name,
        u.email,
        u.role,
        u.description,
        u.image,
        u.created_at as createdAt,
        u.modified_at as modifiedAt
        FROM
        user u
        JOIN
        follower f ON u.user_id = f.user_id
        WHERE
        f.following_id = #{userId}
        ORDER BY
        u.name ASC
        LIMIT
        #{size} OFFSET #{offset}
    </select>

    <!-- 특정 사용자의 팔로잉 수 조회 -->
    <select id="countFollowingsByUserId">
        SELECT
        COUNT(*)
        FROM
        follower
        WHERE
        user_id = #{userId}
    </select>

    <!-- 특정 사용자의 팔로워 수 조회 -->
    <select id="countFollowersByUserId">
        SELECT
        COUNT(*)
        FROM
        follower
        WHERE
        following_id = #{userId}
    </select>

</mapper>
