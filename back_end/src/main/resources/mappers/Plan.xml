<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.stella_trip.dao.plan.PlanDAO">
    <!-- 여행 계획 정보를 매핑하는 resultMap -->
    <resultMap id="PlanMap" type="com.ssafy.stella_trip.plan.dto.PlanDTO">
        <id column="plan_id" property="planId"/>
        <result column="title" property="title"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="description" property="description"/>
        <result column="like_count" property="likeCount"/>
        <result column="created_at" property="createdAt"/>
        <result column="modified_at" property="modifiedAt"/>
        <result column="is_public" property="isPublic"/>
        <result column="stella" property="stella"/>

        <!-- 즉시 로딩: liked 여부-->
        <result column="liked" property="liked"/>

        <!-- 즉시 로딩: writers -->
        <collection property="writers" ofType="com.ssafy.stella_trip.user.dto.UserDTO">
            <id column="user_id" property="userId"/>
            <result column="user_name" property="name"/>
            <result column="email" property="email"/>
            <result column="role" property="role"/>
            <result column="description" property="description"/>
            <result column="image" property="image"/>
            <result column="created_at" property="createdAt"/>
            <result column="modified_at" property="modifiedAt"/>
        </collection>

        <!-- 즉시 로딩: tags -->
        <collection property="tags" ofType="com.ssafy.stella_trip.plan.dto.TagDTO">
            <id column="tag_id" property="tagId"/>
            <result column="tag_name" property="name"/>
            <result column="tag_count" property="count"/>
        </collection>

        <!-- Lazy loading: routes -->
        <collection property="routes" ofType="com.ssafy.stella_trip.plan.dto.RouteDTO"
                    select="getRoutesByPlanId" column="plan_id"/>
    </resultMap>

    <!-- 여행 경로 정보를 매핑하는 resultMap -->
    <resultMap id="RouteMap" type="com.ssafy.stella_trip.plan.dto.RouteDTO">
        <id column="route_id" property="routeId"/>
        <result column="plan_id" property="planId"/>
        <result column="attraction_id" property="attractionId"/>
        <result column="day_index" property="dayIndex"/>
        <result column="order" property="order"/>
        <result column="visit_time" property="visitTime"/>
        <result column="memo" property="memo"/>
        <association property="attraction" javaType="com.ssafy.stella_trip.attraction.dto.AttractionDTO"
                     select="com.ssafy.stella_trip.dao.attraction.AttractionDAO.getAttractionById" column="attraction_id"/>
    </resultMap>

    <!-- plan 등록 관련 쿼리 -->
    <!-- 새로운 여행 계획을 데이터베이스에 삽입 -->
    <insert id="insertPlan" useGeneratedKeys="true" keyProperty="planId">
        INSERT INTO plan (title, start_date, end_date, description, like_count, is_public, stella)
        VALUES (#{plan.title}, #{plan.startDate}, #{plan.endDate}, #{plan.description}, 0, #{plan.isPublic}, #{plan.stella});
    </insert>

    <!-- 태그 목록을 데이터베이스에 삽입(이미 존재하면 무시) -->
    <insert id="insertTags">
        INSERT INTO tag (name)
        VALUES
        <foreach collection="tags" item="tag" separator=",">
            (#{tag})
        </foreach>
        ON DUPLICATE KEY UPDATE name = name
    </insert>

    <!-- 여행 계획과 태그를 연결 -->
    <insert id="linkTagsToPlan">
        INSERT INTO tag_plan (plan_id, tag_id)
        SELECT #{planId}, tag_id FROM tag
        WHERE name IN
        <foreach collection="tags" item="tag" open="(" separator="," close=")">
            #{tag}
        </foreach>
        ON DUPLICATE KEY UPDATE plan_id = plan_id
    </insert>

    <!-- 특정 여행 계획의 모든 태그 연결을 삭제 -->
    <delete id="deletePlanTagByPlanId">
        DELETE FROM tag_plan
        WHERE plan_id = #{planId};
    </delete>

    <!-- 여행 계획 작성자 정보를 추가 -->
    <insert id="insertPlanWriter">
        INSERT INTO plan_writer (plan_id, user_id)
        VALUES (#{planId}, #{userId});
    </insert>

    <!-- 여행 계획에서 특정 작성자를 제거 -->
    <delete id="deletePlanWriter">
        DELETE FROM plan_writer
        WHERE plan_id = #{planId} AND user_id = #{userId};
    </delete>

    <!-- plan조회 -->
    <!-- 여행 계획 ID로 상세 정보 조회 -->
    <select id="getPlanById" resultMap="PlanMap">
        SELECT
        p.*,
        u.user_id, u.name as user_name, u.email, u.role, u.description, u.image, u.created_at, u.modified_at,
        t.tag_id, t.name as tag_name,
        CASE
            WHEN pl.user_id IS NOT NULL THEN 1
            ELSE 0
        END AS liked
        FROM plan p
        LEFT JOIN plan_writer pw ON p.plan_id = pw.plan_id
        LEFT JOIN user u ON pw.user_id = u.user_id
        LEFT JOIN tag_plan tp ON p.plan_id = tp.plan_id
        LEFT JOIN tag t ON tp.tag_id = t.tag_id
        LEFT JOIN liked_plan pl ON p.plan_id = pl.plan_id AND pl.user_id = #{currentUserId}
        WHERE p.plan_id = #{planId}
    </select>

    <!-- 특정 여행 계획의 모든 경로 조회 -->
    <select id="getRoutesByPlanId" resultMap="RouteMap">
        SELECT
        r.route_id,
        r.plan_id,
        r.attraction_id,
        r.day_index,
        r.`order`,
        r.visit_time,
        r.memo
        FROM route r
        WHERE r.plan_id = #{planId}
    </select>

    <!-- 검색 조건에 맞는 여행 계획 목록 조회 -->
    <select id="getPlansByCondition" resultMap="PlanMap">
        SELECT
        p.plan_id,
        p.title,
        p.start_date,
        p.end_date,
        p.description,
        p.like_count,
        p.created_at,
        p.modified_at,
        p.is_public,
        p.stella,
        u.user_id, u.name as user_name, u.email, u.role, u.description, u.image, u.created_at, u.modified_at,
        t.tag_id, t.name as tag_name,
        CASE
            WHEN pl.user_id IS NOT NULL THEN 1
            ELSE 0
        END AS liked
        FROM plan p
        LEFT JOIN plan_writer pw ON p.plan_id = pw.plan_id
        LEFT JOIN user u ON pw.user_id = u.user_id
        LEFT JOIN tag_plan tp ON p.plan_id = tp.plan_id
        LEFT JOIN tag t ON tp.tag_id = t.tag_id
        LEFT JOIN liked_plan pl ON p.plan_id = pl.plan_id AND pl.user_id = #{currentUserId}
        WHERE p.is_public = 1
        <if test="search != null and search != ''">
            AND p.title LIKE CONCAT('%', #{search}, '%')
        </if>
        <if test="userName != null and userName != ''">
            AND EXISTS (
            SELECT 1
            FROM user u2
            WHERE u2.user_id = pw.user_id
            AND u2.name = #{userName}
            )
        </if>
        <if test="duration > 0">
            AND DATEDIFF(p.end_date, p.start_date) + 1 = #{duration}
        </if>
        ORDER BY
        <choose>
            <when test="sort == 'like'">
                p.like_count DESC
            </when>
            <when test="sort == 'recent'">
                p.created_at DESC
            </when>
            <otherwise>
                p.plan_id ASC
            </otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 검색 조건에 맞는 여행 계획의 총 개수 조회 -->
    <select id="countPlansByCondition">
        SELECT COUNT(DISTINCT p.plan_id)
        FROM plan p
        <if test="userName != null and userName != ''">
            LEFT JOIN plan_writer pw ON p.plan_id = pw.plan_id
            LEFT JOIN user u ON pw.user_id = u.user_id
        </if>
        WHERE p.is_public = 1
        <if test="search != null and search != ''">
            AND p.title LIKE CONCAT('%', #{search}, '%')
        </if>
        <if test="userName != null and userName != ''">
            AND u.name = #{userName}
        </if>
        <if test="duration > 0">
            AND DATEDIFF(p.end_date, p.start_date) + 1 = #{duration}
        </if>
    </select>
  
    <!-- 경로 ID로 특정 경로 정보 조회 -->
    <select id="getRouteByRouteId" resultMap="RouteMap">
        SELECT
        r.route_id,
        r.plan_id,
        r.attraction_id,
        r.day_index,
        r.`order`,
        r.visit_time,
        r.memo
        FROM route r
        WHERE r.route_id = #{routeId}
    </select>

    <!-- 특정 여행 계획의 작성자 수 조회 -->
    <select id="getPlanWritersCount">
        SELECT COUNT(DISTINCT pw.user_id)
        FROM plan_writer pw
        WHERE pw.plan_id = #{planId}
    </select>

    <!-- 사용자가 특정 여행 계획의 작성자인지 확인 -->
    <select id="checkPlanWriter">
        SELECT EXISTS (
            SELECT 1
            FROM plan_writer pw
            WHERE pw.plan_id = #{planId} AND pw.user_id = #{userId}
        ) AS is_writer
    </select>

    <!-- 좋아요 관련 쿼리 -->
    <!-- 여행 계획의 좋아요 수 증가 -->
    <update id="increaseLikeCount">
        UPDATE plan
        SET like_count = like_count + 1
        WHERE plan_id = #{planId};
    </update>

    <!-- 여행 계획의 좋아요 수 감소 -->
    <update id="decreaseLikeCount">
        UPDATE plan
        SET like_count = GREATEST(like_count - 1, 0)
        WHERE plan_id = #{planId};
    </update>

    <!-- 사용자가 여행 계획에 좋아요 추가 -->
    <insert id="likePlan">
        INSERT INTO liked_plan (plan_id, user_id)
        VALUES (#{planId}, #{userId});
    </insert>

    <!-- 사용자가 여행 계획에 좋아요 취소 -->
    <update id="unlikePlan">
        DELETE FROM liked_plan
        WHERE plan_id = #{planId} AND user_id = #{userId};
    </update>

    <!-- 사용자가 여행 계획에 좋아요를 했는지 확인 -->
    <select id="isPlanLikedByUser" resultType="boolean">
        SELECT EXISTS (
        SELECT 1
        FROM liked_plan
        WHERE plan_id = #{planId} AND user_id = #{userId}
        ) AS is_liked
    </select>

    <!-- 여행 계획 수정 관련 쿼리 -->
    <!-- 여행 계획의 기본 정보 수정 -->
    <update id="updateBasicPlanInfo">
        UPDATE plan
        SET title = #{title},
            description = #{description},
            is_public = #{isPublic}
        WHERE plan_id = #{planId};
    </update>

    <!-- 여행 계획의 일정(시작일, 종료일) 수정 -->
    <update id="updatePlanSchedule">
        UPDATE plan
        SET start_date = #{startDate}, end_date = #{endDate}
        WHERE plan_id = #{planId};
    </update>

    <!-- 여행 일정 변경 후 초과된 날짜의 경로 삭제 -->
    <delete id="deleteRoutesExceedingDayIndex">
        DELETE FROM route
        WHERE plan_id = #{planId}
        AND day_index > (
            SELECT DATEDIFF(p.end_date, p.start_date) + 1
            FROM plan p
            WHERE p.plan_id = #{planId}
        );
    </delete>

    <!-- 여행 계획 삭제 -->
    <delete id="deletePlan">
        DELETE FROM plan
        WHERE plan_id = #{planId};
    </delete>

    <!-- 여행 별자리 수정 -->
    <update id="updateStella">
        UPDATE plan
        SET stella = #{stella}
        WHERE plan_id = #{planId};
    </update>

    <!-- 새로운 여행 경로 추가 -->
    <insert id="insertRoute">
        INSERT INTO route (plan_id, attraction_id, day_index, `order`, visit_time, memo)
        VALUES (#{planId}, #{attractionId}, #{dayIndex}, #{order}, #{visitTime}, #{memo});
    </insert>

    <!-- 여러 경로의 날짜 및 순서 정보 일괄 수정 -->
    <update id="updateRoutes">
        <foreach collection="routes" item="route" separator=";">
            UPDATE route
            SET
            day_index = #{route.dayIndex},
            `order` = #{route.order}
            WHERE route_id = #{route.routeId}
        </foreach>
    </update>

    <!-- 경로의 상세 정보(방문 시간, 메모) 수정 -->
    <update id="updateRouteInfo">
        UPDATE route
        SET
        visit_time = #{visitTime},
        memo = #{memo}
        WHERE route_id = #{routeId}
    </update>

    <!-- 여러 경로 일괄 삭제 -->
    <delete id="deleteRoutes">
        DELETE FROM route
        WHERE route_id IN
        <foreach collection="routes" item="route" open="(" separator="," close=")">
            #{route.routeId}
        </foreach>
    </delete>
  
    <!-- 특정 사용자가 작성한 여행 계획의 총 개수 조회 -->
    <select id="countUserPlansByUserId">
        select count(distinct p.plan_id)
        from plan p
        join plan_writer pw on p.plan_id = pw.plan_id
        where pw.user_id = #{userId}
    </select>

    <!-- 특정 사용자가 작성한 여행 계획 목록 조회 -->
    <select id="getUserPlansByUserId" resultMap="PlanMap">
        SELECT
        p.*,
        u.user_id, u.name as user_name, u.email, u.role, u.description, u.image, u.created_at, u.modified_at,
        t.tag_id, t.name
        FROM plan p
        JOIN plan_writer pw ON p.plan_id = pw.plan_id
        LEFT JOIN user u ON pw.user_id = u.user_id
        LEFT JOIN tag_plan tp ON p.plan_id = tp.plan_id
        LEFT JOIN tag t ON tp.tag_id = t.tag_id
        WHERE pw.user_id = #{userId}
        ORDER BY p.created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 특정 사용자가 좋아요한 여행 계획 목록 조회 -->
    <select id="getLikedPlansByUserId" resultMap="PlanMap">
        SELECT
        p.*,
        u.user_id, u.name as user_name, u.email, u.role, u.description, u.image, u.created_at, u.modified_at,
        t.tag_id, t.name
        FROM plan p
        JOIN liked_plan fp ON p.plan_id = fp.plan_id
        LEFT JOIN plan_writer pw ON p.plan_id = pw.plan_id
        LEFT JOIN user u ON pw.user_id = u.user_id
        LEFT JOIN tag_plan tp ON p.plan_id = tp.plan_id
        LEFT JOIN tag t ON tp.tag_id = t.tag_id
        WHERE fp.user_id = #{userId}
        ORDER BY fp.created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 특정 사용자가 좋아요한 여행 계획의 총 개수 조회 -->
    <select id="countLikedPlansByUserId">
        SELECT COUNT(DISTINCT p.plan_id)
        FROM plan p
        JOIN liked_plan fp ON p.plan_id = fp.plan_id
        WHERE fp.user_id = #{userId}
    </select>

    <resultMap id="TagMap" type="com.ssafy.stella_trip.plan.dto.TagDTO">
        <id column="tag_id" property="tagId"/>
        <result column="name" property="name"/>
        <result column="tag_count" property="count"/>
    </resultMap>

    <select id="getTagsOrderedByCount" resultMap="TagMap">
        SELECT
        *
        from tag
        order by tag_count desc
        limit #{size}
    </select>
</mapper>
